[tool:pytest]
norecursedirs =
    .git
    dist
    build
addopts =
    --strict
    --doctest-modules
    --durations=0
    --color=yes

[coverage:report]
exclude_lines =
    pragma: no-cover
    pass
    if __name__ == .__main__.:
    add_model_specific_args

[coverage:run]
# TODO, remove this ignores in future
omit =
    pl_bolts/datamodules/stl10_datamodule.py
    pl_bolts/datamodules/ssl_imagenet_datamodule.py
    pl_bolts/datamodules/ssl_datasets.py
    pl_bolts/datamodules/lightning_datamodule.py
    pl_bolts/datamodules/imagenet_datamodule.py
    pl_bolts/datamodules/imagenet_dataset.py
    pl_bolts/datamodules/concat_dataset.py
    pl_bolts/datamodules/cifar10_datamodule.py
    pl_bolts/datamodules/fashion_mnist_datamodule.py
    pl_bolts/datamodules/*datamodule.py
    pl_bolts/datamodules/_datamodule.py

[flake8]
max-line-length = 120
exclude = .tox,*.egg,build,temp
select = E,W,F
doctests = True
verbose = 2
# https://pep8.readthedocs.io/en/latest/intro.html#error-codes
format = pylint
# see: https://www.flake8rules.com/
ignore =
    E731  # Do not assign a lambda expression, use a def
    E231  # Ignore missing space after comma
    W504  # Line break occurred after a binary operator
    F401  # Module imported but unused
    F841  # Local variable name is assigned to but never used
    W605  # Invalid escape sequence 'x'

# setup.cfg or tox.ini
[check-manifest]
ignore =
    *.yml
    .github
    .github/*
    .circleci

[metadata]
license_file = LICENSE
description-file = README.md
# long_description = file:README.md
# long_description_content_type = text/markdown

[mypy]
# Typing tests is low priority, but enabling type checking on the
# untyped test functions (using `--check-untyped-defs`) is still
# high-value because it helps test the typing.
files = pl_bolts, tests
disallow_untyped_defs = True
ignore_missing_imports = True

[mypy-pl_bolts.callbacks.*]
ignore_errors = True

[mypy-pl_bolts.datamodules.*]
ignore_errors = True

[mypy-pl_bolts.datasets.*]
ignore_errors = True

[mypy-pl_bolts.losses.*]
ignore_errors = True

[mypy-pl_bolts.metrics.*]
ignore_errors = True

[mypy-pl_bolts.models.*]
ignore_errors = True

[mypy-pl_bolts.models.autoencoders.*]
ignore_errors = True

[mypy-pl_bolts.models.detection.*]
ignore_errors = True

[mypy-pl_bolts.models.gans.*]
ignore_errors = True

[mypy-pl_bolts.models.regression.*]
ignore_errors = True

[mypy-pl_bolts.models.rl.*]
ignore_errors = True

[mypy-pl_bolts.models.self_supervised.*]
ignore_errors = True

[mypy-pl_bolts.models.vision.*]
ignore_errors = True

[mypy-pl_bolts.optimizers.*]
ignore_errors = True

[mypy-pl_bolts.transforms.*]
ignore_errors = True

[mypy-tests.*]
ignore_errors = True
